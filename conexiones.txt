pin 9 reset azul

50 es 11 MISO
51 es 12 MOSI
52 es 13 SCLK


 GND a GND
SCK a 13
MISO a 12
MOSI a 11
Reset a 9
SDA 8

LED rojo al 5
LED verde al 4
servomotor al 3

44515134



#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

#define RST_PIN         9           // configuramos el pin 9 para reset del mfrc522
#define SS_PIN          8         // configuramos el pin 53 para el selector de chip para el caso del Arduino Mega 
#define ledVerde        4           // led verde en el pin 4
#define ledRojo         5           // led rojo en el pin 5




MFRC522 mfrc522(SS_PIN, RST_PIN);   //
MFRC522::MIFARE_Key key;

Servo servo1;

byte tag1[4] = {0xA4, 0x98, 0x39, 0xA5};
byte tag2[4] = {0x70, 0x78, 0x70, 0xA4};

byte tagActual[4];


void setup() {
  Serial.begin(9600); // velocidad del puerto serie 
   while (!Serial);    // comprobar si ya ha iniciado 
   SPI.begin();        // inicia la comunicacion SPI
   mfrc522.PCD_Init(); //inicia la comunicacion con el modulo RFID
   servo1.attach(3);      // asigna el pin para el Servo 
   pinMode(ledVerde,OUTPUT);  // configuram como salida 
   pinMode(ledRojo,OUTPUT);

}

void loop() {
   if ( ! mfrc522.PICC_IsNewCardPresent())  // comprobar si esta presente la tarjeta 
        return;

    // Selecciona una tarjeta 
    if ( ! mfrc522.PICC_ReadCardSerial())       // leer la tarjeta 
      
        return;

 Serial.print(F("Card UID:"));
    dump_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);   // obtiene los valores leidos de la tarjeta 
       
servo1.write(3);        // coloca el servo en la posicion cero 
digitalWrite(ledVerde,LOW);       // apaga led 
digitalWrite(ledRojo,LOW);  
}

void dump_byte_array(byte *buffer, byte bufferSize) {      // realiza la lectura del codigo de la tarjeta y comprueba 
    for (byte i = 0; i < bufferSize; i++) {         // extrae valores del codigo 
      Serial.print(buffer[i] < 0x10 ? " 0" : " ");
      Serial.print(buffer[i], HEX);
      tagActual[i] = buffer[i];
    }
          if(compararArray(tagActual,tag1)){              // comprobamos el acceso para el primer usuario 
          Serial.println(" Acceso Permitido...");
          digitalWrite(ledVerde,HIGH);
          servo1.write(90);
          delay(1000);
          }
         else if(compararArray(tagActual,tag2)){          // comprobamos el acceso para el segundo usuario 
          Serial.println(" Acceso Permitido...");
          digitalWrite(ledVerde,HIGH);
          servo1.write(90);
          delay(1000);
          }
          else {
            Serial.println(" Desconocido" );            // si el codigo no esta registrado denegar acceso 
           digitalWrite(ledRojo,HIGH);
           delay(1000);
            }       
}


boolean compararArray(byte array1[], byte array2[]){    // comprobara codigo leido con el registrado previamente 

  if(array1[0] != array2[0]) return(false);
  if(array1[1] != array2[1]) return(false);
  if(array1[2] != array2[2]) return(false);
  if(array1[3] != array2[3]) return(false);
  return(true);
}


















#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>

const char* ssid = "Galaxy34";
const char* password = "11223344";
const char* serverAddress = "192.168.104.224";
const int serverPort = 4000;

void setup() {
  Serial.begin(115200);
  Serial.setTimeout(5000);

  // Conéctate a la red WiFi
  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConexión establecida");
}

void loop() {
  // Construye el JSON
  DynamicJsonDocument jsonDocument(200);
  jsonDocument["id"] = 123;  // Aquí deberías utilizar el valor deseado
  jsonDocument["name"] = "Juan";
  jsonDocument["status"] = "Activo";

  // Serializa el JSON a una cadena
  String jsonString;
  serializeJson(jsonDocument, jsonString);

  // Configura la solicitud HTTP POST
  HTTPClient http;
  http.begin("http://" + String(serverAddress) + ":" + String(serverPort) + "/api/users");
  http.addHeader("Content-Type", "application/json");

  // Realiza la solicitud POST con el JSON
  int httpCode = http.POST(jsonString);

  // Verifica la respuesta
  if (httpCode > 0) {
    Serial.println("Respuesta del servidor:");
    Serial.println(http.getString());
  } else {
    Serial.print("Error al realizar la solicitud. Código de error: ");
    Serial.println(httpCode);
  }

  // Libera recursos
  http.end();

  delay(5000);  // Espera 5 segundos antes de realizar la próxima solicitud
}






estoy observando que si, el cambio de velocidad a 9600 hizo que ESP recibiera los datos correctamente, ahora observo que ESP esta recibiendo 3 string diferentes con los cuales intenta hacer POST
1- "Encendido - Conteo por pulsación: 2"
2- "JSON enviado:"
3- "{"id":5,"name":"Juan","status":"Activo"}" este ultimo es el correcto, por lo que ESP hace tre intentos de POST y solo el ultimo funciona.

que me recomiendas? para que no este haciendo los primeros intentos con datos que no son
